import java.util.Queue;

class IsGraphBipartite {
    public boolean isBipartite(int[][] graph) {
        if (graph == null || graph.length == 0) {
            return true;
        }

        int[] visited = new int[graph.length];

        for (int i = 0; i < graph.length; i++) {
            Queue<Integer> q = new LinekedList<>();
            // perform a bfs to every node as root. 
            if (graph[i].length > 0 && visited[i] == 0) {
                q.offer(i);
                while (!q.isEmpty()) {
                    int cur = q.poll(); 
                    for (int child : graph[cur]) {
                        // child -> new node
                        if ( visited[child] == 0) {
                            q.offer(child);
                            visited[child] = visited[cur] == 1 ? 2 : 1;
                        }
                        else {
                            if (visited[cur] == visited[child]) {
                                return false;
                            }
                        }
                    }
                }

            }

        }

        return true;
    }
}
